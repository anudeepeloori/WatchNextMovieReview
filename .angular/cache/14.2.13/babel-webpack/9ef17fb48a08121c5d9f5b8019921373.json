{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet MoviesComponent = class MoviesComponent {\n  constructor(ds, router, hc, toastr) {\n    this.ds = ds;\n    this.router = router;\n    this.hc = hc;\n    this.toastr = toastr;\n    this.p = 1; // Review data object\n\n    this.reviewData = {\n      username: \"\",\n      movieId: null,\n      starRating: 0,\n      reviewText: ''\n    }; // Stores average ratings\n\n    this.avgRatings = {}; // Stores reviews for selected movie\n\n    this.selectedMovieReviews = [];\n    this.selectedMovieAvgRating = 0;\n    this.selectedMovieTitle = ''; //TMDB API\n\n    this.movies = []; // To store movies\n  }\n\n  ngOnInit() {\n    // Fetch movie data\n    this.ds.getMoviesData().subscribe(items => {\n      this.movieData = items;\n    }, err => {\n      console.log(\"Error fetching movies\", err);\n    }); // Retrieve username from local storage\n\n    this.username = localStorage.getItem(\"username\");\n\n    if (this.username) {\n      this.reviewData.username = this.username; // Assign correct value\n      //console.log(\"Username retrieved:\", this.username);\n    } else {\n      console.error(\"Please login to continue..\");\n    } //TMDB \n\n\n    this.loadMovies();\n  } //TMDB Movies\n\n\n  loadMovies() {\n    this.ds.getMoviesData().subscribe(response => {\n      this.movies = response; // âœ… Directly assign response since it's already an array\n      //console.log(`Total Movies Fetched: ${this.movies.length}`, this.movies);\n    });\n  } // Navigate to specific movie details page\n\n\n  onSelectId(id) {\n    this.router.navigateByUrl('movies/' + id);\n  } // Open Review Modal and Fetch Existing Review\n\n\n  openReviewModal(movieId) {\n    //console.log(\"Opening review modal for movieId:\", movieId);\n    if (!movieId) {\n      //console.error(\"Movie ID is missing. Aborting modal open.\");\n      alert(\"Error: Unable to open review modal. Movie ID is missing.\");\n      return;\n    } // Retrieve username before opening modal\n\n\n    this.username = localStorage.getItem(\"username\");\n\n    if (!this.username) {\n      //alert(\"User not logged in. Please log in to rate movies.\");\n      this.toastr.warning(\"User not logged in. Please log in to rate movies.\", \"Warning\"); //console.error(\"Username is null. Cannot proceed.\");\n\n      return;\n    }\n\n    this.reviewData.movieId = movieId;\n    this.reviewData.username = this.username; // console.log(\"Setting movieId:\", this.reviewData.movieId);\n    // console.log(\"Setting username:\", this.reviewData.username);\n    // Fetch existing review if available\n\n    this.ds.getReviewByUserAndMovie(this.username, movieId).subscribe(res => {\n      if (res) {\n        console.log(\"Found existing review:\", res);\n        this.reviewData.starRating = res.rating;\n        this.reviewData.reviewText = res.reviewText;\n      } else {\n        console.log(\"No existing review found, starting fresh.\");\n        this.reviewData.starRating = 0;\n        this.reviewData.reviewText = \"\";\n      }\n    }, err => {\n      console.log(\"No existing rating found.\");\n    });\n  } // Submit Review -Update if Exists,Otherwise Insert\n\n\n  onSubmitReview() {\n    console.log(\"Submitting Review with Data:\", this.reviewData);\n\n    if (!this.reviewData.movieId || !this.reviewData.username) {\n      //alert(\"Error: Missing movie or user information.\");\n      this.toastr.warning(\"Error: Missing movie or user information.\", \"Warning\");\n      return;\n    } //console.log(\"Submitting review for movieId:\", this.reviewData.movieId);\n\n\n    this.ds.submitReview(this.reviewData).subscribe(res => {\n      console.log(\"Review submitted successfully\", res); //alert(res.message);\n\n      this.toastr.success(res.message, \"Success\"); // Close modal manually after successful submission\n\n      let modal = document.getElementById('mdl');\n\n      if (modal) {\n        modal.setAttribute(\"data-bs-dismiss\", \"modal\");\n        modal.classList.remove(\"show\");\n      } // Allow UI interaction by removing modal backdrop manually\n\n\n      let backdrop = document.querySelector('.modal-backdrop');\n\n      if (backdrop) {\n        backdrop.remove();\n      }\n\n      setTimeout(() => {\n        window.location.reload(); // Reloads the current route \n      }, 500);\n    }, err => {\n      console.error(\"Error saving review\", err);\n    });\n  } //Fetch average ratings for each movie\n\n\n  fetchAverageRatings() {\n    this.movieData.forEach(movie => {\n      this.ds.getAverageRating(movie.id).subscribe(rating => {\n        this.avgRatings[movie.id] = rating.avgRating;\n      }, err => {\n        this.avgRatings[movie.id] = 0;\n      });\n    });\n  } //Fetch all reviews and average rating for selected movie\n\n\n  openRatingsModal(movieId, title) {\n    this.selectedMovieTitle = title;\n    this.ds.getAllReviews(movieId).subscribe(reviews => {\n      this.selectedMovieReviews = reviews;\n    }, err => {});\n    this.ds.getAverageRating(movieId).subscribe(rating => {\n      this.selectedMovieAvgRating = rating.avgRating;\n    }, err => {\n      this.selectedMovieAvgRating = 0;\n    });\n  }\n\n};\nMoviesComponent = __decorate([Component({\n  selector: 'app-movies',\n  templateUrl: './movies.component.html',\n  styleUrls: ['./movies.component.css']\n})], MoviesComponent);\nexport { MoviesComponent };","map":null,"metadata":{},"sourceType":"module"}