{"ast":null,"code":"import { forkJoin } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DataService = /*#__PURE__*/(() => {\n  class DataService {\n    constructor(hc) {\n      this.hc = hc;\n      this.userLoginStatus = false;\n      this.apiKey = '2ce2796f1376f76fb5ff2af4de56665c';\n      this.baseUrl = 'https://api.themoviedb.org/3';\n\n      if (localStorage.getItem('username') !== null) {\n        this.userLoginStatus = true;\n      }\n    } //create or register user\n\n\n    createUser(userObj) {\n      return this.hc.post(\"/user/createuser\", userObj);\n    } //login\n\n\n    loginUser(credentials) {\n      if (credentials.type === \"admin\") {\n        return this.hc.post(\"/admin/login\", credentials);\n      }\n\n      if (credentials.type === \"user\") {\n        return this.hc.post(\"/user/login\", credentials);\n      }\n    } //contact us\n\n\n    contactus(value) {\n      return this.hc.post(\"/user/contactform\", value);\n    } //app rating\n\n\n    rating(value) {\n      return this.hc.post(\"/user/apprating\", value);\n    } //get app rating\n\n\n    getratings() {\n      return this.hc.get(\"/user/getappratings\");\n    } // Fetch all movies using the Discover API\n\n\n    getAllMovies() {\n      const totalPages = 10; // Fetch first 10 pages (can be increased up to 500)\n\n      let requests = []; // Create API requests for pages 1 to totalPages\n\n      for (let i = 1; i <= totalPages; i++) {\n        requests.push(this.hc.get(`${this.baseUrl}/discover/movie?api_key=${this.apiKey}&page=${i}`));\n      } // Fetch all pages in parallel using forkJoin\n\n\n      return forkJoin(requests).pipe(map(responses => responses.flatMap(response => response.results)) // Combine all results into one array\n      );\n    } //get movies data\n\n\n    getMoviesData() {\n      return this.hc.get(\"http://localhost:3000/items\");\n    } //get movied data by id\n\n\n    getMoviesDataById(id) {\n      return this.hc.get('http://localhost:3000/items/' + id);\n    } //get top movies data\n\n\n    getTopMoviesData() {\n      return this.hc.get(\"http://localhost:3000/topitems\");\n    } //add new movie\n\n\n    createNewMovie(movieObj) {\n      return this.hc.post(\"http://localhost:3000/item\", movieObj);\n    } // Submit or update movie rating\n\n\n    submitReview(reviewData) {\n      return this.hc.post(\"/user/submitreview\", {\n        username: reviewData.username,\n        movieId: reviewData.movieId,\n        rating: reviewData.starRating,\n        reviewText: reviewData.reviewText\n      });\n    } // Fetch user’s existing rating for a movie\n\n\n    getReviewByUserAndMovie(username, movieId) {\n      return this.hc.get(`/user/getmoviereview/${username}/${movieId}`);\n    } // Fetch average rating of a movie\n\n\n    getAverageRating(movieId) {\n      return this.hc.get(`/user/getaveragerating/${movieId}`);\n    } // Fetch all reviews for a movie\n\n\n    getAllReviews(movieId) {\n      return this.hc.get(`/user/getallreviews/${movieId}`);\n    } //send OTP\n\n\n    sendOTP(email) {\n      return this.hc.post(\"/user/forgot-password\", {\n        email\n      });\n    } //verify OTP\n\n\n    verifyOTP(email, otp) {\n      return this.hc.post(\"/user/verify-otp\", {\n        email,\n        otp\n      });\n    } //Reset password\n\n\n    resetPassword(email, newPassword) {\n      return this.hc.post(\"/user/reset-password\", {\n        email,\n        newPassword\n      });\n    }\n\n  }\n\n  DataService.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  DataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataService;\n})();","map":null,"metadata":{},"sourceType":"module"}